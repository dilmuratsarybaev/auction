@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager navigationManager
 @implements IAsyncDisposable 

 
 <div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px"> 
      @if (!userMessages.Any())
{
              <p>No messages yet, start chatting</p>
}

     @foreach(var userMessage in userMessages)
{
             <div class="row mb-3 d-flex @(userMessage.CurrentUser? "justify-content-end": "")">

                 <div class="card show @(userMessage.CurrentUser? "color-green mr-5": "")" style="width:18rem;">

                     <div class="card-header">
                         @(userMessage.CurrentUser? "You": userMessage.Username )
                     </div>
                     <ul class="list-group list-group-flush">
                         <li class="list-group-item">
                             @userMessage.Message
                         </li>
                     </ul>
                     <div class="card-footer">
                         <span class="small">
                             @userMessage.DateSend.ToString("HH:mm | MMM dd")
                         </span>
                     </div>
                 </div>
             </div>
}
 </div> 
 
 <div class="container"> 
     <div class="row"> 
         <div class="col-3"> 
             <input type="text" @bind="userNameInput" class="form-control" placeholder="Your Name" readonly="@isUserReadonly" /> 
              
         </div> 
         <div class="col-6"> 
             <textarea @bind="messageInput" class="form-control" type="text" placeholder="Start typing...."></textarea> 
         </div> 
         <div class="col-3"> 
             <button class="btn btn-primary" type="button" @onclick="Send" disabled="@(!IsConnected)">Send</button> 
         </div> 
 
     </div> 
 </div> 
 
 @code{ 

     private HubConnection hubConnection;
     private List<UserMessage> userMessages = new();
     private string userNameInput;
     private string messageInput;
     private bool isUserReadonly = false;
     public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


     protected override async Task OnInitializedAsync()
     {
         hubConnection = new HubConnectionBuilder()
             .WithUrl(navigationManager.ToAbsoluteUri("/auctionchut"))
             .Build();

         hubConnection.On<string, string>("RecieveMessage", (user, message) =>
         {
             userMessages.Add(new UserMessage()
             {
                 Username = user,
                 Message = message,
                 CurrentUser = user == userNameInput,
                 DateSend = DateTime.Now
             });
             InvokeAsync(StateHasChanged);

         });

         await hubConnection.StartAsync();


     }

     private async Task Send() {
         if (!string.IsNullOrEmpty(userNameInput) && !string.IsNullOrEmpty(messageInput)){
             Console.WriteLine("render2");

             await hubConnection.SendAsync("SendMessage", userNameInput, messageInput);
             isUserReadonly = true;
             messageInput = string.Empty;
         }
     }
     public async ValueTask DisposeAsync() {
         if (hubConnection is not null){
             await hubConnection.DisposeAsync();
         }
     }
 } 